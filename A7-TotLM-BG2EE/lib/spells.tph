// Installing and updating spells

DEFINE_ACTION_FUNCTION GET_SPELL_INFO
STR_VAR
  file = ~~
RET
  type      // spell type (SPPR=1, SPWI=2, SPIN=3, SPCL=4)
  level     // spell level as per filename
BEGIN
  OUTER_SET type = 0
  OUTER_SET level = "-1"
  ACTION_IF (NOT ~%file%~ STR_EQ ~~ && FILE_EXISTS ~%file%~) BEGIN
    LAF RES_OF_FILESPEC STR_VAR filespec = EVAL ~%file%~ RET res END
    ACTION_TO_UPPER ~res~
    ACTION_IF (~%res%~ STRING_MATCHES_REGEXP ~SPPR[0-9][0-9][0-9]~ = 0) BEGIN
      OUTER_SET type = 1
    END ELSE ACTION_IF (~%res%~ STRING_MATCHES_REGEXP ~SPWI[0-9][0-9][0-9]~ = 0) BEGIN
      OUTER_SET type = 2
    END ELSE ACTION_IF (~%res%~ STRING_MATCHES_REGEXP ~SPIN[0-9][0-9][0-9]~ = 0) BEGIN
      OUTER_SET type = 3
    END ELSE ACTION_IF (~%res%~ STRING_MATCHES_REGEXP ~SPCL[0-9][0-9][0-9]~ = 0) BEGIN
      OUTER_SET type = 4
    END
    ACTION_IF (type > 0) BEGIN
      OUTER_PATCH ~%res%~ BEGIN READ_ASCII 4 level (1) END
      ACTION_IF (NOT IS_AN_INT ~level~) BEGIN
        OUTER_SET level = "-1"
      END
    END
  END
END

/*
TODO:
- read spell-iwd.ids into "$spells_orig(iwd_resref) = symbolic_name"
- for each "iwd_resref" in $spells_orig() 
  - if "symbolic_name" does not exist in spell.ids
    - ADD_SPELL "spell" "symbolic_name"
    - add $map_spell(iwd_resref) = bg2ee_resref
    - for each mod file "%iwd_resref%\(.\)\.spl"
      - copy and rename to "%bg2ee_resref%\1.spl"
      - add $map_spell(iwd_resref\1) = bg2ee_resref\1
  - if "symbolic_name" DOES exist in spell.ids
    - if referenced "bg2ee_resref" does NOT exist
      - add $map_spell(iwd_resref) = bg2ee_resref
    - if referenced "bg2ee_resref" exists
      - add $map_spell(iwd_resref) = "" (to mark as skipped)
- for each mod file ".+\.spl" as iwd_resref
  - if not listed in $map_spell()
    - add $map_spell(iwd_resref) = iwd_resref
    - copy to override

- for each iwd_resref => bg2ee_resref in $map_spell()
  - copy existing "bg2ee_resref"
    - update strrefs
    - abilities > update projectile IDs
    - effects > update strrefs
    - effects > update projectile IDs
    - effects > update SPL resrefs using spell remap table $map_spell()

*/

COPY - ~%MOD_FOLDER%/spl/spell-iwd.ids~ ~override~
  CLEAR_ARRAY ~table~
  READ_2DA_ENTRIES_NOW ~table~ 2
  FOR (row = 0; row < table; ++row) BEGIN
    READ_2DA_ENTRY_FORMER ~table~ row 0 spell_num
    LPF RES_NAME_OF_SPELL_NUM INT_VAR spell_num RET spell_res END
    READ_2DA_ENTRY_FORMER ~table~ row 1 spell_name
    TO_UPPER ~spell_name~
    TEXT_SPRINT $spells_orig(~%spell_res%~) ~%spell_name%~
  END
BUT_ONLY

// Installing and registering SPPR/SPWI/SPIN spells
ACTION_PHP_EACH spells_orig AS iwd_resref => spell_name BEGIN
  OUTER_SET code = IDS_OF_SYMBOL(~spell~ ~%spell_name%~)
  ACTION_IF (code < 0) BEGIN
    LAF GET_SPELL_INFO STR_VAR file = EVAL ~%MOD_FOLDER%/spl/%iwd_resref%.SPL~ RET type level END
    ACTION_IF (type > 0) BEGIN
      ADD_SPELL ~%MOD_FOLDER%/spl/%iwd_resref%.SPL~ type level ~%spell_name%~
      OUTER_SET spell_num = EVAL ~%spell_name%~
      LAF RES_NAME_OF_SPELL_NUM INT_VAR spell_num RET bg2ee_resref = spell_res END
      ACTION_IF (spell_num >= 1000 && spell_num < 3000) BEGIN   // mark priest and wizard spells as hidden
        OUTER_SET $map_hide_spell(~%bg2ee_resref%~) = 1
      END
      OUTER_TEXT_SPRINT $map_spell(~%iwd_resref%~) ~%bg2ee_resref%~
      OUTER_SET $map_spell_added(~%iwd_resref%~) = 1
      OUTER_TEXT_SPRINT $map_spellicon(~%iwd_resref%A~) ~%bg2ee_resref%A~
      OUTER_TEXT_SPRINT $map_spellicon(~%iwd_resref%B~) ~%bg2ee_resref%B~
      OUTER_TEXT_SPRINT $map_spellicon(~%iwd_resref%C~) ~%bg2ee_resref%C~
      ACTION_BASH_FOR ~%MOD_FOLDER%/spl~ ~^%iwd_resref%.+\.SPL$~ BEGIN
        OUTER_PATCH_SAVE suffix ~%BASH_FOR_RES%~ BEGIN
          REPLACE_TEXTUALLY ~%iwd_resref%\(.+\)~ ~\1~
        END
        OUTER_TEXT_SPRINT res ~%bg2ee_resref%%suffix%~
        COPY ~%BASH_FOR_FILESPEC%~ ~override/%res%.SPL~
        OUTER_TEXT_SPRINT $map_spell(~%BASH_FOR_RES%~) ~%res%~
        OUTER_SET $map_spell_added(~%BASH_FOR_RES%~) = 1
      END
    END
  END ELSE BEGIN
    LAF RES_NAME_OF_SPELL_NUM INT_VAR spell_num = code RET bg2ee_resref = spell_res END
    ACTION_IF (FILE_EXISTS_IN_GAME ~%bg2ee_resref%.SPL~) BEGIN
    END ELSE BEGIN
      COPY ~%MOD_FOLDER%/spl/%iwd_resref%.SPL~ ~override/%bg2ee_resref%.SPL~
    END
    OUTER_TEXT_SPRINT $map_spell(~%iwd_resref%~) ~%bg2ee_resref%~
    OUTER_SET $map_spell_added(~%iwd_resref%~) = 0
  END
END

// Installing remaining spell files
ACTION_BASH_FOR ~%MOD_FOLDER%/spl~ ~^.+\.SPL$~ BEGIN
  ACTION_IF (NOT VARIABLE_IS_SET $map_spell(~%BASH_FOR_RES%~) && NOT FILE_EXISTS_IN_GAME ~%BASH_FOR_FILE%~) BEGIN
    COPY ~%BASH_FOR_FILESPEC%~ ~override~
    OUTER_TEXT_SPRINT $map_spell(~%BASH_FOR_RES%~) ~%BASH_FOR_RES%~
    OUTER_SET $map_spell_added(~%BASH_FOR_RES%~) = 1
  END
END

// Updating installed spells
ACTION_PHP_EACH map_spell AS iwd_resref => bg2ee_resref BEGIN
  ACTION_IF ($map_spell_added(~%iwd_resref%~)) BEGIN
    COPY_EXISTING ~%bg2ee_resref%.SPL~ ~override~
      // updating icon BAM
      READ_ASCII 0x3a bam_resref (8) NULL
      TO_UPPER ~bam_resref~
      PATCH_IF (VARIABLE_IS_SET $map_spellicon(~%bam_resref%~)) BEGIN
        TEXT_SPRINT new_bam_resref $map_spellicon(~%bam_resref%~)
        WRITE_ASCIIE 0x3a ~%new_bam_resref%~ (8)
      END
      // updating strrefs
      PATCH_FOR_EACH ofs IN ~0x08~ ~0x0c~ ~0x50~ ~0x54~ BEGIN
        READ_LONG ofs old_strref
        LPF GET_UPDATED_STRREF INT_VAR old_strref RET new_strref END
        WRITE_LONG ofs new_strref
      END

      READ_LONG 0x64 ofs_abil
      READ_SHORT 0x68 num_abil
      READ_LONG 0x6a ofs_fx
      SET num_fx = (SHORT_AT 0x6e) + (SHORT_AT 0x70)
      // updating abilities
      FOR (idx = 0; idx < num_abil; ++idx) BEGIN
        SET ofs = ofs_abil + (idx * 0x28)
        // updating icon BAM
        READ_ASCII (ofs + 0x04) bam_resref (8) NULL
        TO_UPPER ~bam_resref~
        PATCH_IF (VARIABLE_IS_SET $map_spellicon(~%bam_resref%~)) BEGIN
          TEXT_SPRINT new_bam_resref $map_spellicon(~%bam_resref%~)
          WRITE_ASCIIE (ofs + 0x04) ~%new_bam_resref%~ (8)
        END
        // projectiles
        READ_SHORT (ofs + 0x26) old_id
        LPF GET_PROJECTILE_ID INT_VAR old_id RET new_id END
        WRITE_SHORT (ofs + 0x26) new_id
        SET value = (SHORT_AT (ofs + 0x1e)) + (SHORT_AT (ofs + 0x20))
        PATCH_IF (value > num_fx) BEGIN SET num_fx = value END
      END

      // updating effects
      FOR (idx = 0; idx < num_fx; ++idx) BEGIN
        SET ofs = ofs_fx + (idx * 0x30)
        READ_SHORT ofs opcode
        // strrefs
        LPF OPCODE_USE_STRREF INT_VAR opcode RET param1 param2 special END
        PATCH_IF (param1) BEGIN
          READ_LONG (ofs + 0x04) old_strref
          LPF GET_UPDATED_STRREF INT_VAR old_strref RET new_strref END
          WRITE_LONG (ofs + 0x04) new_strref
        END
        PATCH_IF (param2) BEGIN
          READ_LONG (ofs + 0x08) old_strref
          LPF GET_UPDATED_STRREF INT_VAR old_strref RET new_strref END
          WRITE_LONG (ofs + 0x08) new_strref
        END
        PATCH_IF (special) BEGIN
          READ_LONG (ofs + 0x2c) old_strref
          LPF GET_UPDATED_STRREF INT_VAR old_strref RET new_strref END
          WRITE_LONG (ofs + 0x2c) new_strref
        END

        // projectiles
        LPF OPCODE_USE_PROJECTILE INT_VAR opcode RET param1 param2 END
        PATCH_IF (param1) BEGIN
          READ_LONG (ofs + 0x04) old_id
          LPF GET_PROJECTILE_ID INT_VAR old_id RET new_id END
          WRITE_LONG (ofs + 0x04) new_id
        END
        PATCH_IF (param2) BEGIN
          READ_LONG (ofs + 0x08) old_id
          LPF GET_PROJECTILE_ID INT_VAR old_id RET new_id END
          WRITE_LONG (ofs + 0x08) new_id
        END

        // SPL resrefs
        LPF OPCODE_USE_RESREF INT_VAR opcode RET type END
        PATCH_IF (~%type%~ STRING_CONTAINS_REGEXP ~SPL~ = 0) BEGIN
          READ_ASCII (ofs + 0x14) resref (8) NULL
          TO_UPPER ~resref~
          PATCH_IF (NOT ~%resref%~ STR_EQ ~~ && VARIABLE_IS_SET $map_spell(~%resref%~)) BEGIN
            TEXT_SPRINT new_resref $map_spell(~%resref%~)
            WRITE_ASCIIE (ofs + 0x14) ~%new_resref%~ (8)
          END
        END

        // smtables entries
        PATCH_IF (opcode = 331) BEGIN
          READ_LONG (ofs + 0x08) value
          PATCH_IF (VARIABLE_IS_SET $map_smtables(~%value%~)) BEGIN
            WRITE_LONG (ofs + 0x08) $map_smtables(~%value%~)
          END
        END

        // portrait icons
        PATCH_IF (opcode = 142) BEGIN
          READ_LONG (ofs + 0x08) value
          PATCH_IF (VARIABLE_IS_SET $map_statdesc(~%value%~)) BEGIN
            WRITE_LONG (ofs + 0x08) $map_statdesc(~%value%~)
          END
        END
      END
    BUT_ONLY
  END
END


// Newly installed spells should not appear in spell list
<<<<<<<< .../inlined/a7-totlm/empty.txt
>>>>>>>>
// register spell names in internal file for use in subcomponents
COPY ~.../inlined/a7-totlm/empty.txt~ ~%MOD_FOLDER%/backup/spells.installed~
ACTION_IF (VARIABLE_IS_SET $map_spell(~SPPR738~)) BEGIN // Exclude "Heavenly Inferno"
  OUTER_TEXT_SPRINT excluded_spell $map_spell(~SPPR738~)
END ELSE BEGIN
  OUTER_TEXT_SPRINT excluded_spell ~~
END
ACTION_PHP_EACH map_hide_spell AS resref => value BEGIN
  OUTER_TEXT_SPRINT line ~%resref% 1           0          0~
  APPEND ~hidespl.2da~ ~%line%~ UNLESS ~%resref%~
  ACTION_IF (NOT ~%resref%~ STR_EQ ~%excluded_spell%~) BEGIN
    APPEND_OUTER ~%MOD_FOLDER%/backup/spells.installed~ ~%resref%~ UNLESS ~%resref%~
  END
END


// EFF files
ACTION_BASH_FOR ~%MOD_FOLDER%/eff~ ~^.+\.eff$~ BEGIN
  ACTION_IF (NOT FILE_EXISTS_IN_GAME ~%BASH_FOR_FILE%~) BEGIN
    COPY ~%BASH_FOR_FILESPEC%~ ~override~
      READ_LONG 0x10 opcode
      // strrefs
      LPF OPCODE_USE_STRREF INT_VAR opcode RET param1 param2 special END
      PATCH_IF (param1) BEGIN
        READ_LONG 0x1c old_strref
        LPF GET_UPDATED_STRREF INT_VAR old_strref RET new_strref END
        WRITE_LONG 0x1c new_strref
      END
      PATCH_IF (param2) BEGIN
        READ_LONG 0x20 old_strref
        LPF GET_UPDATED_STRREF INT_VAR old_strref RET new_strref END
        WRITE_LONG 0x20 new_strref
      END
      PATCH_IF (special) BEGIN
        READ_LONG 0x48 old_strref
        LPF GET_UPDATED_STRREF INT_VAR old_strref RET new_strref END
        WRITE_LONG 0x48 new_strref
      END

      // projectiles
      LPF OPCODE_USE_PROJECTILE INT_VAR opcode RET param1 param2 END
      PATCH_IF (param1) BEGIN
        READ_LONG 0x1c old_id
        LPF GET_PROJECTILE_ID INT_VAR old_id RET new_id END
        WRITE_LONG 0x1c new_id
      END
      PATCH_IF (param2) BEGIN
        READ_LONG 0x20 old_id
        LPF GET_PROJECTILE_ID INT_VAR old_id RET new_id END
        WRITE_LONG 0x20 new_id
      END

      // SPL resrefs
      LPF OPCODE_USE_RESREF INT_VAR opcode RET type END
      PATCH_IF (~%type%~ STRING_CONTAINS_REGEXP ~SPL~ = 0) BEGIN
        READ_ASCII 0x30 resref (8) NULL
        TO_UPPER ~resref~
        PATCH_IF (NOT ~%resref%~ STR_EQ ~~ && VARIABLE_IS_SET $map_spell(~%resref%~)) BEGIN
          TEXT_SPRINT new_resref $map_spell(~%resref%~)
          WRITE_ASCIIE 0x30 ~%new_resref%~ (8)
        END
      END

      // smtables entries
      PATCH_IF (opcode = 331) BEGIN
        READ_LONG 0x20 value
        PATCH_IF (VARIABLE_IS_SET $map_smtables(~%value%~)) BEGIN
          WRITE_LONG 0x20 $map_smtables(~%value%~)
        END
      END

      // portrait icons
      PATCH_IF (opcode = 142) BEGIN
        READ_LONG 0x20 value
        PATCH_IF (VARIABLE_IS_SET $map_statdesc(~%value%~)) BEGIN
          WRITE_LONG 0x20 $map_statdesc(~%value%~)
        END
      END
  END
END

INCLUDE ~%MOD_FOLDER%/lib/a7_pvrz.tpa~

// Reads all lines from the current text file into an array.
DEFINE_PATCH_FUNCTION READ_TEXT_LINES
INT_VAR upper = 0 // whether to upper-case the textual content
RET lines         // number of array elements
RET_ARRAY lines   // array containing text lines, numbered sequentially, starting at 0
BEGIN
  SET lines = 0
  SET ofs1 = 0
  CLEAR_ARRAY ~lines~
  WHILE (ofs1 >= 0) BEGIN
    SET ofs2 = INDEX_BUFFER(~[%WNL%]~ ofs1)
    PATCH_IF (ofs2 < 0) BEGIN SET ofs2 = BUFFER_LENGTH END
    READ_ASCII ofs1 line (ofs2 - ofs1)
    PATCH_IF (upper) BEGIN TO_UPPER ~line~ END
    TEXT_SPRINT $lines(~%lines%~) ~%line%~
    SET lines += 1
    SET ofs1 = INDEX_BUFFER(~[^%WNL%]~ ofs2)
  END

  // Workaround for WeiDU bug: return array must contain at least one element.
  PATCH_IF (lines = 0) BEGIN
    TEXT_SPRINT $lines(~%lines%~) ~~
  END
END


// Returns the updated string reference for the given original strref.
DEFINE_PATCH_FUNCTION GET_UPDATED_STRREF
INT_VAR
  old_strref = "-1"
RET
  new_strref
BEGIN
  SET new_strref = old_strref
  PATCH_IF (old_strref >= 0 && TRA_ENTRY_EXISTS("old_strref")) BEGIN
    SET new_strref = RESOLVE_STR_REF( (AT "old_strref") )
  END
END

DEFINE_ACTION_FUNCTION GET_UPDATED_STRREF
INT_VAR
  old_strref = "-1"
RET
  new_strref
BEGIN
  OUTER_PATCH ~~ BEGIN
    LPF GET_UPDATED_STRREF INT_VAR old_strref RET new_strref END
  END
END


// Returns whether param1/param2/special of given opcode takes a strref as argument.
DEFINE_PATCH_FUNCTION OPCODE_USE_STRREF
INT_VAR
  opcode = "-1"
RET
  param1 param2 special // returns non-zero if the respective parameter requires a strref
BEGIN
  SET param1 = 0
  SET param2 = 0
  SET special = 0
  PATCH_MATCH opcode WITH
    103 139 180 183 206 253 254 267 290 330 338  BEGIN SET param1 = 1 END
    181 318 319 BEGIN SET special = 1 END
    DEFAULT
  END
END


// Returns resource type(s) supported by given opcode.
DEFINE_PATCH_FUNCTION OPCODE_USE_RESREF
INT_VAR
  opcode = "-1"
RET
  type  // resource type (extension, multiple extensions separated by colon, no type as empty string)
BEGIN
  TEXT_SPRINT type ~~
  PATCH_MATCH opcode WITH
    67 135 151 BEGIN TEXT_SPRINT type ~CRE~ END
    68 215 296 BEGIN TEXT_SPRINT type ~VEF:VVC:BAM~ END
    153 154 155 156 157 158 BEGIN TEXT_SPRINT type ~VVC:BAM~ END
    258 260 318 321 324 BEGIN TEXT_SPRINT type ~ITM:SPL~ END
    78 146 147 148 171 172 200 201 206 207 223 226 227 228 232 251 252 256 259 266 313 326 333 335 340 341 361 366 BEGIN TEXT_SPRINT type ~SPL~ END
    82 298 BEGIN TEXT_SPRINT type ~BCS~ END
    107 BEGIN TEXT_SPRINT type ~BMP~ END
    111 112 122 123 143 180 255 BEGIN TEXT_SPRINT type ~ITM~ END
    127 214 273 331 BEGIN TEXT_SPRINT type ~2DA~ END
    152 BEGIN TEXT_SPRINT type ~WBM~ END
    174 BEGIN TEXT_SPRINT type ~WAV~ END
    177 183 248 249 272 283 BEGIN TEXT_SPRINT type ~EFF~ END
    186 BEGIN TEXT_SPRINT type ~ARE~ END
    187 BEGIN TEXT_SPRINT type ~BAM~ END
    336 BEGIN TEXT_SPRINT type ~VVC~ END
    DEFAULT
  END
END


// This function expands opcode 298 functionality, so that it can be used for customized cutscene content.
//
// STR_VAR script       (optional) Script content as string that should be added to the cutscene script. 
// STR_VAR baf_file     (optional) Script source file path with cutscene content.
// STR_VAR bcs_resource (optional) Name of BCS game resource with cutscene content.
// RET value            Non-zero value used for Global("CUT250","GLOBAL") to identify the specified cutscene script block(s).
//                      This value can be used for further preparations (e.g. to initialize opcode 265 in associated SPL, ITM or EFF resources).
//                      Zero if script content could not be added to the cutscene.
//
// Note: The Global("CUT250","GLOBAL") check is automatically added to the top of the trigger section of all specified script blocks.
//       You can leave it empty if the Global("CUT250","GLOBAL") check is the only required trigger for the script block.
DEFINE_ACTION_FUNCTION EXTEND_CUT250
STR_VAR
  script       = ~~
  baf_file     = ~~
  bcs_resource = ~~
RET
  value
BEGIN
  OUTER_SET value = 0

  ACTION_IF (GAME_IS ~bgee bg2ee eet iwdee pstee~) BEGIN
    LAF __PREPARE_CUT250 END

    // adding script source file content to script string (if specified)
    ACTION_IF (NOT ~%baf_file%~ STR_EQ ~~) BEGIN
      COPY - ~%baf_file%~ ~%baf_file%~
        READ_ASCII 0 content (BUFFER_LENGTH)
        SPRINT script ~%script%%LNL%%content%~
      BUT_ONLY
    END

    // adding bcs resource content to script string (if specified)
    ACTION_IF (NOT ~%bcs_resource%~ STR_EQ ~~) BEGIN
      COPY_EXISTING ~%bcs_resource%~ ~override~
        DECOMPILE_AND_PATCH BEGIN
          READ_ASCII 0 content (BUFFER_LENGTH)
          SPRINT script ~%script%%LNL%%content%~
        END
      BUT_ONLY
    END

    COPY_EXISTING ~cut250b.bcs~ ~override~
      DECOMPILE_AND_PATCH BEGIN
        // determining next "CUT250" value
        SET cur_value = "-1"
        REPLACE_EVALUATE ~Global("CUT250","GLOBAL",\([-0-9]+\))~ BEGIN
          PATCH_IF (IS_AN_INT ~MATCH1~ && MATCH1 > cur_value) BEGIN
            SET cur_value = MATCH1
          END
        END ~%MATCH0%~

        // extending script
        PATCH_IF (cur_value >= 0) BEGIN
          SET value = cur_value + 1

          // adding Global() condition
          INNER_PATCH_SAVE script ~%script%~ BEGIN
            REPLACE_TEXTUALLY CASE_SENSITIVE ~\bIF\b~ ~IF%LNL%Global("CUT250","GLOBAL",%value%)%LNL%~
          END

          SET len = STRING_LENGTH ~%script%~
          SET ofs = BUFFER_LENGTH
          INSERT_BYTES ofs len
          WRITE_ASCIIE ofs ~%script%~ (len)
        END
      END
    BUT_ONLY
  END
END


// Customized cut250a script
<<<<<<<< .../inlined/EXTEND_CUT250/cut250a.baf
IF
  True()
THEN
  RESPONSE #100
    CutSceneId(Player1)
    StartCutSceneEx("CUT250B",TRUE)
END
>>>>>>>>

// Initial cut250b script
<<<<<<<< .../inlined/EXTEND_CUT250/cut250b.baf
IF
  True()
THEN
  RESPONSE #100
    CutSceneId(Player1)
    SetGlobal("CUT250","GLOBAL",0)
END
>>>>>>>>

// Placeholder script for original cutscene script (non-BG2)
<<<<<<<< .../inlined/EXTEND_CUT250/cut250b-placeholder.baf
IF
  Global("CUT250","GLOBAL",0)
THEN
  RESPONSE #100
    CutSceneId(Player1)
    EndCutSceneMode()
END
>>>>>>>>

// Used internally. Unhardcodes cutscene script CUT250A.BCS.
DEFINE_ACTION_FUNCTION __PREPARE_CUT250
BEGIN
  // Initializing customized cutscene script file
  ACTION_IF (NOT FILE_EXISTS_IN_GAME ~cut250b.bcs~) BEGIN
    COMPILE ~.../inlined/EXTEND_CUT250/cut250b.baf~

    // preparing original cutscene content
    OUTER_SPRINT cut250a ~~
    ACTION_IF (NOT FILE_EXISTS_IN_GAME ~cut250a.bcs~) BEGIN
      // CUT250A.BCS may not exist in BGEE, IWDEE or PSTEE
      COMPILE ~.../inlined/EXTEND_CUT250/cut250a.baf~
    END ELSE BEGIN
      // transfering and patching original script content to string variable for later
      OUTER_SET cut250a_prepared = 0
      COPY_EXISTING ~cut250a.bcs~ ~override~
        DECOMPILE_AND_PATCH BEGIN
          SET cut250a_prepared = INDEX_BUFFER(~StartCutSceneEx(~) >= 0
          PATCH_IF (NOT cut250a_prepared) BEGIN
            READ_ASCII 0 cut250a (BUFFER_LENGTH)
            DELETE_BYTES 0 BUFFER_LENGTH

            INNER_PATCH_SAVE cut250a ~%cut250a%~ BEGIN
              REPLACE_TEXTUALLY ~\bTrue()$~ ~Global("CUT250","GLOBAL",0)~
            END
          END
        END
      BUT_ONLY

      // updating original script content
      ACTION_IF (NOT cut250a_prepared) BEGIN
        COMPILE ~.../inlined/EXTEND_CUT250/cut250a.baf~
      END
    END

    // creating new content from scratch (should only apply to BGEE, IWDEE or PSTEE)
    ACTION_IF (~%cut250a%~ STR_EQ ~~) BEGIN
      COPY - ~.../inlined/EXTEND_CUT250/cut250b-placeholder.baf~ ~.../inlined/EXTEND_CUT250/cut250b-placeholder.baf~
        READ_ASCII 0 cut250a (BUFFER_LENGTH)
      BUT_ONLY
    END

    // extending customized cutscene script by original content
    COPY_EXISTING ~cut250b.bcs~ ~override~
      DECOMPILE_AND_PATCH BEGIN
        SET len = STRING_LENGTH ~%cut250a%~
        SET ofs = BUFFER_LENGTH
        INSERT_BYTES ofs len
        WRITE_ASCIIE ofs ~%cut250a%~ (len)
      END
    BUT_ONLY
  END
END
